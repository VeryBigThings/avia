name: "Run tests | deploy"

on:
  push:
    branches-ignore:
    - 'WIP/*'

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.8
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
        ports:
          - 9200:9200
    env:
      CACHE_VERSION: v1
      AVIA_DOCS: avia_docs
      ADMIN_PORT: 4000
      API_PORT: 3000
      AWS_ACCESS_KEY_ID: api_key
      AWS_REGION: aws_region
      AWS_SECRET_ACCESS_KEY: secret_api_key
      BACKEND_URL: http://localhost:4000
      BUCKET_NAME: bucket_name
      DATABASE_URL: postgres://postgres:postgres:@db/snitch_dev
      ELASTIC_HOST: http://localhost:9200/
      ETSY_CONSUMER_KEY: api_key
      ETSY_CONSUMER_SECRET: api_key
      FRONTEND_CHECKOUT_URL: frontend_checkout_url
      FRONTEND_URL: http://localhost:4200
      HOST: localhost
      HOSTED_PAYMENT_URL: hosted_payment_url
      PASSWORD_RESET_SALT: password_reset_salt
      POOL_SIZE: 10
      SENDGRID_API_KEY: api_key
      SENDGRID_SENDER_EMAIL: noreplay@nue.com
      SESSION_COOKIE_NAME: nue_session
      SESSION_COOKIE_SIGNING_SALT: session_cookie_salt
      SESSION_COOKIE_ENCRYPTION_SALT: session_cookie_encryption
      SUPPORT_URL: support_url
      SECRET_KEY_BASE: oZiDNlntvnC+q7EAIKVUV/AYTJ30UQZh/eUwcFK5h7As0Rhc6Zuf//0fvx9pMZUY
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost/snitch_test
      TOKEN_MAXIMUM_AGE: 36000
      WKHTML_PATH: /usr/local/bin/wkhtmltopdf
    steps:
      - uses: actions/checkout@v2

      - uses: webfactory/ssh-agent@v0.2.0
        with:
          ssh-private-key: ${{ secrets.VBT_DEPLOY_SSH_PRIVATE_KEY }}

      - uses: actions/setup-elixir@v1
        with:
          otp-version: 22.3.4.2
          elixir-version: 1.10.4

      - name: Restore cached deps
        uses: actions/cache@v2
        with:
          path: |
            deps
             _build
          key: deps-${{ env.CACHE_VERSION }}-${{ github.ref }}-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            deps-${{ env.CACHE_VERSION }}-${{ github.ref }}-
            deps-${{ env.CACHE_VERSION }}-

      - name: Install wkhtmltopdf deps
        run: |
          wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
          tar vxf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
          sudo cp wkhtmltox/bin/wk* /usr/local/bin/

      - name: Fetch deps
        run: mix deps.get

      - name: Compile project
        run: |
          MIX_ENV=test mix compile
          MIX_ENV=dev mix compile
          MIX_ENV=prod mix compile

      # - name: Run linter checks
      #   run: mix credo list

      - name: Check code format
        run: mix format --check-formatted

      # - name: Run dialyzer
      #   run: mix dialyzer

      # - name: Reset database
      #   run: MIX_ENV=test mix ecto.reset

      # - name: Run tests
      #   run: make test

      # - name: Check migrations reversibility
      #   run: MIX_ENV=test mix ecto.rollback --all

      - name: Check OTP release
        run: |
          MIX_ENV=dev mix release --overwrite

  build-develop:
    needs: test
    name: Build, push, and deploy develop
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/heroku'

    env:
      HEROKU_APP_NAME: nue-develop
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

    steps:
      - uses: actions/checkout@v2

      - uses: webfactory/ssh-agent@v0.2.0
        with:
          ssh-private-key: ${{ secrets.VBT_DEPLOY_SSH_PRIVATE_KEY }}

      - name: Build and push docker image
        run: make heroku/build-and-push

      - name: Run prerelease phase
        run: make heroku/release
